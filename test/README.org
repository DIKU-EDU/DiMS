#+TITLE: DiMS Test Programs

This directory contains baseline assembly (~.S~) files and C files for testing
the simulator. To ease development, we provide an illustrative ~Makefile~.

Both assembly files and C files are cross-compiled into MIPS32 ELF binaries,
hence the ~.elf~ extension on all binaries produced.

* Usage

The ~Makefile~ can be used as a black-box, but diving in is strongly
recommended.

To cross-compile all source files into executables, type

#+BEGIN_SRC sh
make all
#+END_SRC

To clean things up, type

#+BEGIN_SRC sh
make clean
#+END_SRC sh

To disassemble a binary to see the bytecode produced, you can use the ~show_~
prefix we've added:

#+BEGIN_SRC sh
make show_ori.elf
make show_universe.elf
#+END_SRC

This will cross-compile ~universe.c~ before showing the disassembly.

To merely cross-compile an assembly file or C file, type the name of the target
binary:

#+BEGIN_SRC sh
make ori.elf
make universe.elf
#+END_SRC

* Assembly Files

Every assembly file should have the following layout:

#+BEGIN_EXAMPLE
.globl _start
_start:

  # First instruction
  # Remaining assembly code

.include "_shutdown.S"
#+END_EXAMPLE

The GNU linker looks for the label ~_start~ to mark the following instruction
as the entry point of your binary. The file ~_shutdown.S~ defines a shutdown
sequence for the simulator. This sequence might change as we develop the
simulator.

* C Files

There is nothing special about C files, except that:

  1. You don't have the C standard library at hand.
  2. Libraries are not supported by the ~Makefile~ in general.

In other words, a C file corresponds to a binary, and so must contain a `main`
function.

All C files are prepended by ~_jal-main.S~, which wraps a ~jal main~
instruction as mentioned for assembly files above. This is sufficient to run C,
provided that your simulator supports the instructions that your C file
disassembles to.
